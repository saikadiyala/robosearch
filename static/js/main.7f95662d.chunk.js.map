{"version":3,"sources":["serviceWorker.js","components/Searchbox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Searchbox","searchChange","className","type","placeholder","onChange","Card","name","email","id","src","alt","CardList","robots","map","user","i","key","username","Scroll","props","style","overflowY","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredrobot","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCOSC,EAxBC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OAGC,6BACI,2BACAC,UAAU,mCACVC,KAAK,SACLC,YAAY,SACZC,SAAUJ,MCUJK,EAjBJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAErB,OAEI,yBAAKP,UAAU,uDACX,yBAAKQ,IAAG,+BAA0BD,EAA1B,YAAwCE,IAAI,WACpD,6BACI,4BAAKJ,GACJ,2BAAIC,MCWJI,EApBD,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACb,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACC,kBAAC,EAAD,CACGC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBW,SAAUL,EAAOG,GAAGE,SACpBV,MAAOK,EAAOG,GAAGR,aCM1BW,G,MAjBF,SAACC,GAEd,OAEA,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,UAClCH,EAAMI,YCuCIC,E,kDAvCX,aAAc,IAAD,8BACX,gBAaFC,eAAe,SAACC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAbpC,EAAKC,MAAO,CACRnB,OAAQ,GACRgB,YAAY,KAJV,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACf,OAAOwB,S,+BAO9B,IAAD,OACKC,EAAcC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAAC,GACzC,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAGhE,OAAIH,KAAKP,MAAMnB,OAAO+B,OAK7B,yBAAK1C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACC,kBAAC,EAAD,CAAWD,aAAcsC,KAAKb,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUb,OAAQyB,MART,2C,GAzBNO,aCClBC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SN0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7f95662d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nconst Searchbox=({searchChange})=>{\n    return(\n\n\n     <div>\n         <input \n         className=\"pa3 ba b--green bg-lightest-blue\"\n         type=\"search\" \n         placeholder=\"search\"\n         onChange={searchChange}\n         />\n        </div>\n\n\n\n\n\n\n    );\n\n\n\n\n}\nexport default Searchbox;","import React from 'react';\n\n\nconst Card=({name,email,id})=>{\n    \n   return(\n       \n       <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n           <img src={`https://robohash.org/${id}?100*100`} alt=\"robots\"/>\n           <div>\n               <h2>{name}</h2>\n                <p>{email}</p>\n           </div>\n       </div>     \n  \n );\n\n\n\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\nconst CardList=({robots})=>{\n    return(\n        <div> \n            {\n                robots.map((user,i)=>{\n                    return (\n                     <Card \n                        key={i} \n                        id={robots[i].id} \n                        name={robots[i].name} \n                        username={robots[i].username} \n                        email={robots[i].email}\n                     />\n                    );\n                }\n              )\n            }\n        </div>\n        );\n }\n export default CardList;","import React from 'react';\n\nconst Scroll=(props)=>{\n\nreturn(\n\n<div style={{overflowY:'scroll',height:'500px'}}>\n    {props.children}\n</div>\n\n\n\n\n\n);\n  \n\n\n};\nexport default Scroll;","import React,{Component} from 'react';\nimport Searchbox from '../components/Searchbox';\nimport CardList from '../components/CardList';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component{\n    constructor(){\n      super();\n           this.state ={\n               robots: [],\n               searchField:' '\n             }\n\n    }\n    componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(users=>this.setState({robots:users}));\n\n    }\n    onSearchChange=(event)=>{\n       this.setState({searchField:event.target.value}) \n    }\n  \n  render(){\n         const filteredrobot=this.state.robots.filter(robot=>{\n             return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n         })\n\n             if(!this.state.robots.length){\n                 return <h1>Loading</h1>;\n             }\n             else{\n    return(\n      <div className=\"tc\">\n          <h1 className=\"f1\">Robofriends</h1>\n           <Searchbox searchChange={this.onSearchChange}/>\n           <Scroll>  \n               <CardList robots={filteredrobot}/>\n            </Scroll>\n        \n      </div>\n  );}\n}\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n <App/>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}